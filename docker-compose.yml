# version: '3'

# services:
#   chat-app-1:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - "3001:3001"
#     environment:
#       - PORT=3001
#       - CORS_ORIGIN=${CORS_ORIGIN}
#       - UPSTASH_REDIS_REST_URL=${UPSTASH_REDIS_REST_URL}

#   chat-app-2:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - "4000:4000"
#     environment:
#       - PORT=4000
#       - CORS_ORIGIN=${CORS_ORIGIN}
#       - UPSTASH_REDIS_REST_URL=${UPSTASH_REDIS_REST_URL}

#   chat-app-3:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     ports:
#       - "5000:5000"
#     environment:
#       - PORT=5000
#       - CORS_ORIGIN=${CORS_ORIGIN}
#       - UPSTASH_REDIS_REST_URL=${UPSTASH_REDIS_REST_URL}

#   caddy:
#     image: caddy/caddy:2.7.3-alpine
#     container_name: caddy-server
#     restart: unless-stopped
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - $PWD/Caddyfile:/etc/caddy/Caddyfile
#       - $PWD/site:/srv
#       - caddy_data:/data
#       - caddy_config:/config

# volumes:
#   caddy_data:
#   caddy_config:

# version: "3"

# services:
#   redis:
#     image: redis:latest
#     container_name: redis-server
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     #   - ./redis.conf:/usr/local/etc/redis/redis.conf
#     # command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

#   # chat-app-1:
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile
#   #   ports:
#   #     - "3001:3001"
#   #   environment:
#   #     - PORT=3001
#   #     - CORS_ORIGIN=${CORS_ORIGIN}
#   #     - REDIS_HOST=redis
#   #     - REDIS_PORT=6379
#   #   depends_on:
#   #     - redis

# volumes:
#   redis_data:

# version: "3"

# services:
#   redis:
#     image: redis:latest
#     container_name: redis-server-main
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data

#   postgres:
#     image: postgres:latest
#     container_name: postgres-db-main
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#       - POSTGRES_DB=telehealth
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     restart: always

# volumes:
#   redis_data:
#   postgres_data:

# version: "3"

# services:
#   redis:
#     image: redis:latest
#     container_name: redis-server-main
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data

#   postgres:
#     image: postgres:latest
#     container_name: postgres-db-main
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#       - POSTGRES_DB=telehealth
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     restart: always
#     networks:
#       - my_network

#   app:
#     build: .
#     container_name: fastify-app
#     environment:
#       - DATABASE_URL=postgresql://postgres:postgres@postgres-db-main:5432/telehealth?schema=public
#       - PORT=3001
#       - HOST=0.0.0.0
#       - CORS_ORIGIN=http://localhost:3000
#     ports:
#       - "3001:3001"
#     depends_on:
#       - postgres
#       - redis
#     networks:
#       - my_network
#     restart: always

# volumes:
#   redis_data:
#   postgres_data:

# networks:
#   my_network:
#     driver: bridge

version: "3"

services:
  redis:
    image: redis:latest
    container_name: redis-server-main
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - my_network

  postgres:
    image: postgres:latest
    container_name: postgres-db-main
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=telehealth
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - my_network

  app:
    build: .
    container_name: fastify-app
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-db-main:5432/telehealth?schema=public
      - REDIS_URL=redis://redis:6379
      - PORT=3001
      - HOST=0.0.0.0
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - my_network
    restart: always

volumes:
  redis_data:
  postgres_data:

networks:
  my_network:
    driver: bridge
# Another Version from bolt
# version: "3.8"

# services:
#   redis:
#     image: redis:latest
#     container_name: redis-server-main
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     networks:
#       - app_network
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 5s
#       timeout: 3s
#       retries: 5

#   postgres:
#     image: postgres:latest
#     container_name: postgres-db-main
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: telehealth
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     networks:
#       - app_network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 5s
#       timeout: 3s
#       retries: 5

#   app:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: fastify-app
#     environment:
#       DATABASE_URL: postgresql://postgres:postgres@postgres-db-main:5432/telehealth?schema=public
#       REDIS_URL: redis://redis-server-main:6379
#       PORT: 3001
#       HOST: 0.0.0.0
#       CORS_ORIGIN: http://localhost:3000
#       NODE_ENV: production
#     ports:
#       - "3001:3001"
#     depends_on:
#       redis:
#         condition: service_healthy
#       postgres:
#         condition: service_healthy
#     networks:
#       - app_network
#     restart: unless-stopped
#     deploy:
#       restart_policy:
#         condition: on-failure
#         max_attempts: 3
#         window: 120s

# volumes:
#   redis_data:
#     name: telehealth_redis_data
#   postgres_data:
#     name: telehealth_postgres_data

# networks:
#   app_network:
#     name: telehealth_network
#     driver: bridge
